# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'recipe2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import csv
import os
import xlsxwriter

from PyQt5.QtCore import    (Qt, QMimeData, pyqtSignal, QObject,
                             QDir
                             )
from PyQt5.QtGui import     (QStandardItemModel, QStandardItem, 
                             QDrag, QPixmap, QPainter, QCursor )
from PyQt5.QtWidgets import (QProxyStyle,QStyleOption,
                            QTableView, QTableWidget, QTableWidgetItem,
                            QHeaderView, QItemDelegate, QMainWindow,
                            QHBoxLayout, QVBoxLayout, QGridLayout,
                            QWidget, QPushButton, QLabel,
                            QDialog, QGroupBox, QComboBox,
                            QDoubleSpinBox, QSpinBox,
                            QDialogButtonBox,
                            QFileDialog,
                            QApplication)

class varPopUp(QDialog):
    # defining the custom pop up winow inherits
    # default properties from QDialog 
    def __init__(self):
        super(varPopUp, self).__init__()
        self.setWindowTitle("Properties of Variable")
        # self.varPopUpUI() # run and show the GUI of the window 

    # creating the GUI of thw window
    # def varPopUpUI(self):
        
        """creating main layout for the GroupBox"""
        # print(content)
        # self.groupBox = QGroupBox(content)
        self.groupBox = QGroupBox(content)
        groupBoxLayout = QHBoxLayout()
        
        """creating layout for the titles made from labels"""
        self.labelWidget = QWidget()
        labelLayout = QVBoxLayout()
        # creating differnt labels for each porperties
        self.timeLabel = QLabel("Time into Run (mins)")
        self.iniValLabel = QLabel("Initial Value")
        self.finValLabel = QLabel("Final Value")
        self.rampTypeLabel = QLabel("Ramp Type)")
        self.rampPeriodLabel = QLabel("Ramp Duration (mins)")
        self.rampEqnLabel = QLabel("Ramp Equation")
        
        # adding labels into labelLayout
        labelLayout.addWidget(self.timeLabel)
        labelLayout.addWidget(self.iniValLabel)
        labelLayout.addWidget(self.finValLabel)
        labelLayout.addWidget(self.rampTypeLabel)
        if content == "Feed Pump":
            labelLayout.addWidget(self.rampPeriodLabel)
            labelLayout.addWidget(self.rampEqnLabel)
        
        # setting labelLayout to labelWidget
        self.labelWidget.setLayout(labelLayout)
        
        
        """creating layout for inputing values with ComboBox and SpinBox"""
        self.valueWidget = QWidget()
        valueLayout = QVBoxLayout()
        
        # Setting up Time SpinBox
        self.timeBox = QSpinBox()
        self.timeBox.setSuffix(' mins')
        self.timeBox.setRange(0, 3600)
        self.timeBox.setValue(0)
        self.timeBox.valueChanged.connect(self.updateTime)
        # self.timeIntoRun = self.timeBox.value()
        # print("current time = ", self.timeIntoRun)
        
        # Setting up Initial Value DoubleSpinBox
        self.iniValBox = QDoubleSpinBox()
        self.iniValBox.setDecimals(3)
        self.iniValBox.setValue(0.000)
        if content == "Temperature":
            self.iniValBox.setRange(0.0, 45.0)    
            self.iniValBox.setSingleStep(0.5)
        if content == "Air Pump":
            self.iniValBox.setRange(0.0, 100.0)    
            self.iniValBox.setSingleStep(0.5)
        if content == "O2 Pump":
            self.iniValBox.setRange(0.0, 100.0)    
            self.iniValBox.setSingleStep(0.5)
        if content == "pH":
            self.iniValBox.setRange(0.0, 14.0)    
            self.iniValBox.setSingleStep(0.5)
        if content == "Dissolved O2":
            self.iniValBox.setRange(0.0, 100.0)    
            self.iniValBox.setSingleStep(0.5)
        if content == "Feed Pump":
            self.iniValBox.setRange(0.0, 100.0)    
            self.iniValBox.setSingleStep(0.5)
        self.iniValBox.valueChanged.connect(self.updateIniVal)
        # self.iniValue = self.iniValBox.value()
        # print("current inital value = ", self.iniValue)
        
        
        
        # global iniVal
        # iniVal = str(self.iniValBox.value())
        
        
        # Setting up Final Value DoubleSpinBox
        self.finValBox = QDoubleSpinBox()
        self.finValBox.setValue(0)
        if content == "Temperature":
            self.finValBox.setDecimals(3)
            self.finValBox.setRange(0.0, 3600.0)
            self.finValBox.setSingleStep(0.5)
            self.finValBox.setValue(0.000)
        if content == "Air Pump":
            self.finValBox.setDecimals(3)
            self.finValBox.setRange(0.0, 3600.0)
            self.finValBox.setSingleStep(0.5)
            self.finValBox.setValue(0.000)
        if content == "O2 Pump":
            self.finValBox.setDecimals(3)
            self.finValBox.setRange(0.0, 3600.0)
            self.finValBox.setSingleStep(0.5)
            self.finValBox.setValue(0.000)
        if content == "pH":
            self.finValBox.setDecimals(3)
            self.finValBox.setRange(0.0, 3600.0)
            self.finValBox.setSingleStep(0.5)
            self.finValBox.setValue(0.000)
        if content == "Dissolved O2":
            self.finValBox.setDecimals(3)
            self.finValBox.setRange(0.0, 3600.0)
            self.finValBox.setSingleStep(0.5)
            self.finValBox.setValue(0.000)
        if content == "Feed Pump":
            self.finValBox.setDecimals(3)
            self.finValBox.setRange(0.0, 100.0)
            self.finValBox.setSingleStep(0.5)
            self.finValBox.setValue(0.000)
        self.finValBox.valueChanged.connect(self.updateFinVal)
        # self.finValue = self.finValBox.value()
        # print("current final value = ", self.finValue)
        
        # Setting up Ramp Type ComboBox
        self.rampTypeBox = QComboBox()
        if content == "Feed Pump":
            self.rampTypeBox.addItems(["Linear", "Exponential"])
        else: 
            self.rampTypeBox.addItems(["Linear"])
        # self.rampType = str(self.rampTypeBox.currentText())
        # print("current ramp type = ", self.rampType)
        
    
        # Setting up Ramp Period SpinBox
        self.rampPeriodBox = QSpinBox()
        self.rampPeriodBox.setValue(0)
        self.rampPeriodBox.setSuffix(' mins')
        self.rampPeriodBox.setRange(0, 3600)
        self.rampPeriodBox.valueChanged.connect(self.updateRampPeriod)
        # self.rampPeriod = str(self.rampPeriodBox.value())
        # print("current ramp period = ", self.rampPeriod)
        
        
        # Setting up label for Ramp Equation 
        self.rampEqnBox = QLabel("equation")
        
        # adding ComboxBox, SpinBox into valueLayout
        valueLayout.addWidget(self.timeBox)
        valueLayout.addWidget(self.iniValBox)
        valueLayout.addWidget(self.finValBox)
        valueLayout.addWidget(self.rampTypeBox)
        if content == "Feed Pump":
            valueLayout.addWidget(self.rampPeriodBox)
            valueLayout.addWidget(self.rampEqnBox)
        
        # setting valueLayout into valueWidget
        self.valueWidget.setLayout(valueLayout)
        
        
        """add label and value widget into main GroupBox layout"""
        
        groupBoxLayout.addWidget(self.labelWidget)
        groupBoxLayout.addSpacing(50)
        groupBoxLayout.addWidget(self.valueWidget)
        
        
        # Finally applying layout to GroupBox Widget
        self.groupBox.setLayout(groupBoxLayout)
        
        
        
        """Buttons section of Dialog box"""
        # self.confirmButton = QPushButton("Confirm")
        # self.confirmButton.clicked.connect(self.accept)
        self.buttonbox = QDialogButtonBox(self)
        self.buttonbox.setStandardButtons(QDialogButtonBox.Cancel|QDialogButtonBox.Ok)
        
        self.buttonbox.accepted.connect(self.accept)
        self.buttonbox.rejected.connect(self.reject)
        
        """"top layout of Dialog box"""
        layout = QVBoxLayout()
        layout.addWidget(self.groupBox)
        layout.addWidget(self.buttonbox)
        self.setLayout(layout)
        
    def updateTime(self, value):
        time = value
        print("time = ", time)
        
    def updateIniVal(self, initialValue):
        iniVal = initialValue
        print("Initial Value =", iniVal)
        
    def updateFinVal(self, finalValue):
        finVal = finalValue
        print("Final Value =", finVal)
        
    # update Ramp Period value everytime any SpinBox button is clicked
    def updateRampPeriod(self, value):
        rampPeriod = value
        print("Ramp period =", rampPeriod)

"""Creating Button for Drag and Drop"""        
class variableButton(QPushButton):
    # defining what happens when button is clicked with mouse
    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.drag_start_position = event.pos()
            print(self.drag_start_position)
            
    # defining what happens when button is moved with mouse    
    def mouseMoveEvent(self, event):
        # only works with clicking button with Left button of mouse
        if not(event.buttons() & Qt.LeftButton):
            return 
        else:
            # start dragging action 
            drag = QDrag(self)
            
            # associating the data stored in clipboard for drag and drop
            mimeData = QMimeData()
            mimeData.setText(self.text())
            
            drag.setMimeData(mimeData)
            print(mimeData.text())
            global content 
            # making the text of button global to be used in other class
            content = mimeData.text()
            
            # creating a copy of the button to show dragging effect
            pixmap = QPixmap(self.size()) # label size
            
            painter = QPainter(pixmap)
            painter.drawPixmap(self.rect(),self.grab())
            painter.end()
            
            drag.setPixmap(pixmap)
            drag.setHotSpot(event.pos())
            drag.exec_(Qt.CopyAction | Qt.MoveAction)
            



class Communicate(QObject):
    
    varExist = pyqtSignal()

        
"""Creating table on recipe page"""
class myTable(QTableWidget):
    # defining the table to inherit default properties from QTableWidget 
    def __init__(self, rows, columns, parent):
        super(myTable, self).__init__(rows, columns, parent)
        # setting only second column to accept drop
        if columns == 1:
            self.setAcceptDrops(True)
        # self.setSortingEnabled(True)
        
        self.c = Communicate()
        self.c.varExist.connect(self.executeVarDialog)
        self.c.varExist.connect(self.fillInTable)
        
        # orderType = Qt.AscendingOrder
        # self.sortItems(0, orderType)
        
        # data = []
        # for row in ['Temp','Air Pump','O2 Pump','pH','Dissolved O2','Feed Pump']:
        #     for column in range(1):
        #         item = QCustomTableWidgetItem(f'{row}-{column}')
        #         # item.setDropEnabled(True)
                
        #         data.append(item)
                
        
    # defining the event sent to table widget as dragging action enters it
    def dragEnterEvent(self, event):
        if event.mimeData().hasText():
            event.accept()
            
    # defining the event sent to table widget as dragging action enters it            
    # from https://stackoverflow.com/questions/10264040/how-to-drag-and-drop-into-a-qtablewidget-pyqt
    def dragMoveEvent(self, event):
        pos = event.pos()
        column = self.columnAt(pos.x())
        # print(column)
        
        # defining icon shown at cursor depending on the column that the 
        # cursor moves to to show if that column can accept drops
        if column == 1:
           event.acceptProposedAction()
        else:
            event.ignore()
    
    # defining the event that happens when drop happens
    # from https://stackoverflow.com/questions/3953001/how-to-insert-data-from-lineedit-to-tablewidget-in-pyqt4
    def dropEvent(self, event):
        pos = event.pos()
        text = event.mimeData().text()
        global row
        row = self.rowAt(pos.y())
        global column
        column = self.columnAt(pos.x())
        item = QTableWidgetItem(text)
        
        self.setItem(row, column, item)
        event.acceptProposedAction()
        self.c.varExist.emit()
            
            
        
# class MyTableWidgetItem(QTableWidgetItem):
#     def __init__(self, number):
#         QTableWidgetItem.__init__(self, number, QTableWidgetItem.UserType)
#         self.__number = number

#     def __lt__(self, other):
#         return self.__number < other.__number

        
    def executeVarDialog(self):
        # varDialog = varPopUp()
        # varDialog.exec_()
        pass
        
    def fillInTable(self):
        varDialog = varPopUp()
        # response = varDialog.exec_()
        if varDialog.exec_() == QDialog.Accepted:
            print("accpeted")
            time = varDialog.timeBox.value()
            iniVal = varDialog.iniValBox.value()
            print("initial value = ",iniVal)
            finVal = varDialog.finValBox.value()
            rampType = varDialog.rampTypeBox.currentText()
            
            # print("Time = ", time)
            timeItem = QCustomTableWidgetItem(str(time))
            iniValItem = QTableWidgetItem(str(iniVal))
            finValItem = QTableWidgetItem(str(finVal))
            rampTypeItem = QTableWidgetItem(str(rampType))
            
            print("Current Row = ", row)
            print("Current Column = ", column)
            self.setItem(row, column-1, timeItem)
            self.setItem(row, column+1, iniValItem)
            self.setItem(row, column+2, finValItem)
            self.setItem(row, column+3, rampTypeItem)
            
            if content == "Feed Pump":
                rampPeriod = varDialog.rampPeriodBox.value()
                rampPeriodItem = QTableWidgetItem(str(rampPeriod))
                self.setItem(row, column+4, rampPeriodItem)
                
            else:
                pass
            
            # self.setSortingEnabled(True)
            
        else: 
            emptyItem = QTableWidgetItem()
            self.setItem(row, column, emptyItem)
            
class QCustomTableWidgetItem (QTableWidgetItem):
    def __lt__ (self, other):
        try:
            # print(self.text()), float(other.text())
            return float(self.text()) < float(other.text())
        except:
            return QTableWidgetItem.__lt__(self, other)







class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1325, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        """Setup main widget"""
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(30, 10, 1291, 531))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        
        
        """Setting up Open Button"""
        self.openButton = QtWidgets.QPushButton(self.widget)
        self.openButton.setObjectName("openButton")
        self.gridLayout.addWidget(self.openButton, 0, 0, 1, 1)
        self.openButton.clicked.connect(self.openSheet)
        
        """Setting up Save Button"""
        self.saveButton = QtWidgets.QPushButton(self.widget)
        self.saveButton.setObjectName("saveButton")
        self.gridLayout.addWidget(self.saveButton, 0, 11, 1, 1)
        self.saveButton.clicked.connect(self.saveSheet)
        
        """Setting up Sort Button"""
        self.sortButton = QtWidgets.QPushButton(self.widget)
        self.sortButton.setObjectName("sortButton")
        self.gridLayout.addWidget(self.sortButton, 13, 11, 1, 1)
        self.sortButton.clicked.connect(self.sortTableAscending)
        
        """Table Widget"""
        self.table = myTable(50,7,self.widget)
        self.table.setObjectName("table")
        self.table.setColumnCount(7)
        self.table.setRowCount(50)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(6, item)
        self.gridLayout.addWidget(self.table, 1, 0, 12, 12)
        self.table.setAcceptDrops(True)
        
        """Variable Buttons"""
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton_4 = variableButton(self.widget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.pushButton_5 = variableButton(self.widget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.verticalLayout.addWidget(self.pushButton_5)
        self.pushButton_7 = variableButton(self.widget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout.addWidget(self.pushButton_7)
        self.pushButton_6 = variableButton(self.widget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.verticalLayout.addWidget(self.pushButton_6)
        self.pushButton_8 = variableButton(self.widget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.verticalLayout.addWidget(self.pushButton_8)
        self.pushButton_9 = variableButton(self.widget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.verticalLayout.addWidget(self.pushButton_9)
        self.gridLayout.addLayout(self.verticalLayout, 3, 13, 8, 2)
        
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1325, 31))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
    def sortTableAscending(self):
        # self.table = MyTable(7,7,self)
        print("sorted")
        self.table.setSortingEnabled(True)
        self.table.sortByColumn(0, Qt.AscendingOrder)
        
    def openSheet(self):
        self.check_change = False
        path = QFileDialog.getOpenFileName(self, 'Open CSV', os.getenv('HOME'), 'CSV(*.csv)')
        if path[0] != '':
            with open(path[0], newline='') as csv_file:
                self.table.setRowCount(0)
                self.table.setColumnCount(10)
                my_file = csv.reader(csv_file, dialect='excel')
                for row_data in my_file:
                    row = self.table.rowCount()
                    self.table.insertRow(row)
                    if len(row_data) > 10:
                        self.table.setColumnCount(len(row_data))
                    for column, stuff in enumerate(row_data):
                        item = QTableWidgetItem(stuff)
                        self.table.setItem(row, column, item)
        self.check_change = True
        
    
    def saveSheet(self):
        path = QFileDialog.getSaveFileName(self, 'Save CSV', os.getenv('HOME'), 'CSV(*.csv)')
        if path[0] != '':
            with open(path[0], 'w') as csv_file:
                writer = csv.writer(csv_file, dialect='excel')
                for row in range(self.table.rowCount()):
                    row_data = []
                    for column in range(self.table.columnCount()):
                        item = self.table.item(row, column)
                        if item is not None:
                            row_data.append(item.text())
                        else:
                            row_data.append('')
                    writer.writerow(row_data)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.openButton.setText(_translate("MainWindow", "Open"))
        self.saveButton.setText(_translate("MainWindow", "Save"))
        item = self.table.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "1"))
        item = self.table.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "2"))
        item = self.table.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "3"))
        item = self.table.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "4"))
        item = self.table.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "5"))
        item = self.table.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "6"))
        item = self.table.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "7"))
        item = self.table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Time"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Variable"))
        item = self.table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Initial Value"))
        item = self.table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Final Value"))
        item = self.table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Ramp Type"))
        item = self.table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Ramp Period "))
        item = self.table.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Ramp Equation "))
        self.pushButton_4.setText(_translate("MainWindow", "Temperature"))
        self.pushButton_5.setText(_translate("MainWindow", "Air Pump"))
        self.pushButton_7.setText(_translate("MainWindow", "O2 Pump"))
        self.pushButton_6.setText(_translate("MainWindow", "pH"))
        self.pushButton_8.setText(_translate("MainWindow", "Dissolved O2"))
        self.pushButton_9.setText(_translate("MainWindow", "Feed Pump"))
        self.sortButton.setText(_translate("MainWindow", "Sort"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
